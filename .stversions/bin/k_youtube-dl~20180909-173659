#!/bin/bash
# Download all videoes bigger than x and newer than y. Also convert mp3 audio file from video files downloaded.

daysOld=1
minDuration=1800 # seconds
maxDownloads=5 # per url

helpText() {
	echo "Usage: $(basename $0) URL|FILE VIDEO_DESTINATION [AUDIO_DESTINATION]"
	echo
	echo "When used with url argument, $(basename $0) processes that url."
	echo "When used with file argument, $(basename $0) processes all urls found in plain text file."
	echo "When 3rd argument is used (AUDIO_DESTINATION), video is also converted to mp3 and stored"
	echo "  in specified location."
	exit 0
}

# write filenames into array
updateFileArray() {
	IFS_backup=$IFS
	IFS=$'\n'
	videoFiles=( $(/bin/ls -1 $videoPath | awk '/.mp4$|.flv$/ {print}') )
	audioFiles=( $(/bin/ls -1 $audioPath | awk '/.mp3$/ {print}') )
	IFS=$IFS_backup
}

# check number of arguments.
if [[ $# < 2 ]] || [[ $# > 3 ]]; then
	echo "Error: Wrong number of arguments!"
	echo
	helpText
fi

# check if argument 1 is an url.
if [[ $(echo $1 | awk '/^https:\/\/|^http:\/\// {print}') ]]; then
	sourceURL=$1
else
	# or if argument 1 is a valid file.
	if [[ ! -f $1 ]]; then
		echo "Error: $1 does not exist!"
		echo
		helpText
	else
		sourceFile=$1
	fi
fi

# check if argument 2 is a valid folder path.
if [[ ! -d $2 ]]; then
	echo "Error: $2 does not exist!"
	echo
	helpText
fi
videoPath=$2
if [[ ! $(echo $videoPath | awk '/\/$/ {print}') ]]; then
	videoPath+='/'
fi

# check for argument 3 and if it is a valid folder path.
if [[ $3 ]]; then
	if [[ ! -d $3 ]]; then
		echo "Error: $3 does not exist!"
		echo
		helpText
	fi
	audioPath=$3
	if [[ ! $(echo $audioPath | awk '/\/$/ {print}') ]]; then
		audioPath+='/'
	fi
fi

# download video files
updateFileArray
dateAfter=$(/bin/date --date="-$daysOld day" "+%Y%m%d")

if [[ $sourceURL ]]; then
	URLs=( $sourceURL )
else
	URLs=( $(cat $sourceFile | awk '/^https:\/\/|^http:\/\// {print}') )
fi

for (( i = 0; i < ${#URLs[@]}; i++ )); do
		youtube-dl -f best -ciwv --dateafter $dateAfter --playlist-end $maxDownloads --match-filter "duration >= $minDuration" -o "$videoPath%(uploader)s - %(title)s.%(ext)s" "${URLs[$i]}"
done

# convert video files into audio files
for (( i = 0; i < ${#videoFiles[@]}; i++ )); do
	videoFileName=$(basename -- "${videoFiles[$i]}")
	videoFileName="${videoFileName%.*}"
	foundAudioFile="false"
	for (( j = 0; j < ${#audioFiles[@]}; j++ )); do
		audioFileName=$(basename -- "${audioFiles[$j]}")
		audioFileName="${audioFileName%.*}"
		if [[ $videoFileName == $audioFileName ]]; then
			foundAudioFile="true"
			break
		fi
	done
	if [[ $foundAudioFile == "false" ]]; then
		ffmpeg -i "$videoPath${videoFiles[$i]}" "$videoPath$videoFileName.mp3"
		mv "$videoPath$videoFileName.mp3" "$audioPath"
	fi
done

# delete extraneus audiofiles
updateFileArray
for (( i = 0; i < ${#audioFiles[@]}; i++ )); do
	audioFileName=$(basename -- "${audioFiles[$i]}")
	audioFileName="${audioFileName%.*}"
	foundVideoFile="false"
	for (( j = 0; j < ${#videoFiles[@]}; j++ )); do
		videoFileName=$(basename -- "${videoFiles[$j]}")
		videoFileName="${videoFileName%.*}"
		if [[ $audioFileName == $videoFileName ]]; then
			foundVideoFile="true"
			break
		fi
	done
	if [[ $foundVideoFile == "false" ]]; then
		rm -f "$audioPath${audioFiles[$i]}"
		echo "deleting $audioPath${audioFiles[$i]}"
	fi
done

# delete extraneus videofiles
