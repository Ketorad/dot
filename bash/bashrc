# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# ---------------- Aliases ----------------
# fix for reading alias as sudo
alias sudo='sudo '

# fix for getting correct color scheme in vim when using tmux
alias tmux="TERM=screen-256color-bce tmux"

# ls
# enable color support of ls
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	alias ls='ls --color=auto --group-directories-first -h'
else
	alias ls='ls -h --group-directories-first'
fi

alias lsr='ls -R'
alias ll='ls -l'
alias la='ls -A'
alias lla='ls -lA'
alias llr='ls -lRsA'

# cd with ls
c() {
	if [[ $1 ]]; then
		cd "$1";
	else
		cd;
	fi
	echo " --- $(pwd) ---";
	ls;
	tempCwdFile="/tmp/cwd"
	#if [[ -G $tempCwdFile ]]; then
		pwd > $tempCwdFile
	#fi
}
alias cd="c"

# xclip
alias cb='sed -e '"'"'s/^/"/g'"'"' -e '"'"'s/$/"/g'"'"' | tr -d '"'"'\n'"'"' | xclip -selection clipboard'

# date
alias date='date "+%a %y:%m:%d:%H:%M:%S"'

# pacman mirrorlist update
#alias mirror='sudo reflector --protocol https --latest 50 --number 20 --sort rate --save /etc/pacman.d/mirrorlist'

alias reboot='sudo reboot'
alias shutdown='sudo shutdown'

# transmission torrent client
alias trc='transmission-remote-cli'
# ----------------/


# ---------------- Keybindings ----------------
bind -m vi-insert '"\C-l": clear-screen'
bind -m vi-insert '"\C-g":"git add . && git commit -a && git push\n"'
bind -m vi-insert '"\C-h":"cd \n"'
# ----------------/


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# ---------------- Global variables ----------------
export PATH="$PATH:$HOME/dot/bin"
export EDITOR="vim"
export VISUAL="vim"
export TERMINAL="urxvt"
export BROWSER="qutebrowser"
# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}
# ----------------/


# ---------------- Prompt ----------------

# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}

function nonzero_return() {
	RETVAL=$?
	[ $RETVAL -ne 0 ] && echo "$RETVAL"
}

# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo " [${BRANCH}${STAT}]"
	else
		echo ""
	fi
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}

# create color for hostname based on hostname
colorsArray=("00;31" "00;32" "00;33" "00;34" "00;35" "00;36" "01;31" "01;32" "01;33" "01;34" "01;35" "01;36" "01;30")
user=$(logname)
fqdn=$(hostname -f)

#userValue=0
#for (( i=0; i < ${#user}; i++ )); do
	#userValue=$(( $userValue + $(printf '%d' "'${user:$i:1}") ))
##done
#userValue=$(( $userValue % ${#colorsArray[@]} ))
userValue=5

fqdnValue=0
for (( i=0; i < ${#fqdn}; i++ )); do
	fqdnValue=$(( $fqdnValue + $(printf '%d' "'${fqdn:$i:1}") ))
done
fqdnValue=$(( $fqdnValue % ${#colorsArray[@]} ))

export PS1="\[\e[${colorsArray[$userValue]}m\]\u\[\e[m\]@\[\e[${colorsArray[$fqdnValue]}m\]\H\[\e[m\]:\[\e[34m\]\W\[\e[m\]\`parse_git_branch\`\[\e[31m\]\`nonzero_return\`\[\e[m\] \[\e[33m\]\\$\[\e[m\] "
# ----------------/


# enable vi mode
set -o vi

if [[ "$(tty)" = "/dev/tty1" ]]; then
	pgrep i3 || pgrep dwm || startx
fi
