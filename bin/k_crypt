#!/bin/bash
# Encrypt or decrypt a file


helpText() {
	echo "\
Decrypt file and print to terminal
    Usage: $(basename $0) encrypted_filename

Encrypt a file and save as new file (will overwrite)
    Usage: $(basename $0) filename encrypted_filename

Decrypt encrypted file, open in vim buffer, encrypt and update the file
    Usage: $(basename $0) -v encrypted_filename

OPTIONS
    -h --help
        Print this help text and exit

    -v --vim-buffer
        Open encrypted file in vim buffer, and update file when closed
"

	exit 0
}


printError() {
    echo -e "\033[0;31mError:\033[0m $1\n"
    helpText
}


# ERROR CHECKS

# check for dependencies
[[ $(command -v openssl) ]] || printError "Dependency not met! Please install 'openssl'."

# check if minimum number of arguments are met
(( $# < 1 )) && printError "Not enough arguments!"

# check arguments
for (( i=1; i <= $#; i++ )); do
    case ${!i} in

        -h | --help)
            helpText
            ;;
        -e | --edit-text)
            [[ $(command -v vipe) ]] || printError "Dependency not met! Please install 'vipe'."
            ! [[ $fileName ]] && editText=1 || printError "Too many arguments!"
            ;;
        *)
            if [[ $# == "2" ]] && ! (( editText )) && ! [[ $fileName ]]; then
                fileName="${!i}"
            elif ! [[ $fileNameEncrypted ]]; then
                fileNameEncrypted="${!i}"
            else
                printError "Too many arguments!"
            fi
            ;;

    esac
done

# check if any files as been defined in arguments
[[ $fileName ]] || [[ $fileNameEncrypted ]] || printError "No files in arguments!"

# check for invalid paths
[[ $fileName ]] && ! [[ -d $(dirname $fileName) ]] && printError "No path to '$(dirname $fileName)'!"
[[ $fileNameEncrypted ]] && ! [[ -d $(dirname $fileNameEncrypted) ]] && printError "No path to '$(dirname $fileNameEncrypted)'!"


# MAIN PROGRAM

if ! [[ $fileName ]] && ! (( editText )); then
    openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in "$fileNameEncrypted"
elif [[ $fileName ]] && [[ $fileNameEncrypted ]]; then
    openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in "$fileName" -out "$fileNameEncrypted"
elif (( editText )); then
    printf "enter aes-256-cbc encryption password:"
    read -s pass
    echo
    openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in "$fileNameEncrypted" -pass pass:$pass | vipe | openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -out "$fileNameEncrypted" -pass pass:$pass
    pass=""

else
    printError "Something went wrong!"
fi
