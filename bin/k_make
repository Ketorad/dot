#!/bin/bash
# run cmake . with Debug or Release flags


cmakeFile="CMakeLists.txt"


helpText() {
	echo "Usage:"
	echo "$(basename $0)            Build with Debug flags"
	echo "$(basename $0) init       Create $cmakeFile file"
	echo "$(basename $0) debug      Build with Debug flags"
	echo "$(basename $0) release    Build with Release flags"
}


init() {
	if [[ -e "$cmakeFile" ]]; then
		echo "Error: $cmakeFile already exist in folder"
		exit 0
	fi

	echo "Creating $cmakeFile"
	echo "cmake_minimum_required (VERSION 3.0)
project ()
set (CMAKE_CXX_FLAGS \"\${CMAKE_CXX_FLAGS} -Wall -Werror -std=c++14\")


###############################################################################
## folder paths ###############################################################
###############################################################################

set (source_dir \"\${PROJECT_SOURCE_DIR}/src\")
set (include_dir \"\${PROJECT_SOURCE_DIR}/include\")
set (library_dir \"\${PROJECT_SOURCE_DIR}/lib\")

if (\${CMAKE_BUILD_TYPE} STREQUAL \"Debug\")
	set (build_dir \"\${PROJECT_SOURCE_DIR}/build/debug\")
	message (\"Debug mode\")
elseif (\${CMAKE_BUILD_TYPE} STREQUAL \"Release\")
	set (build_dir \"\${PROJECT_SOURCE_DIR}/build/release\")
	message (\"Release mode\")
else ()
	message (\"Warning: Unknown build type. \\\"\${CMAKE_BUILD_TYPE}\\\"\")
endif ()


###############################################################################
## file globbing ##############################################################
###############################################################################

file (GLOB_RECURSE source_files \${source_dir}/*.h \${source_dir}/*.cpp)


###############################################################################
## target definitions #########################################################
###############################################################################

include_directories (\${include_dir})
link_directories (\${library_dir})

set (CMAKE_RUNTIME_OUTPUT_DIRECTORY \${build_dir})
add_executable (\${PROJECT_NAME} \${source_files})

#set (CMAKE_LIBRARY_OUTPUT_DIRECTORY \${build_dir})
#add_library (\${PROJECT_NAME} SHARED \${source_files})

#file (REMOVE_RECURSE \"\${build_dir}/\")
#file (COPY \"\${library_dir}/\" DESTINATION \${build_library_dir})


###############################################################################
## dependencies ###############################################################
###############################################################################

#target_link_libraries(\${PROJECT_NAME} some_library)

# Compile commands for vim youcompleteme
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)" > $cmakeFile

	# make folders
	if [[ ! -d build ]]; then
		mkdir build
	fi
	if [[ ! -d include ]]; then
		mkdir include
	fi
	if [[ ! -d lib ]]; then
		mkdir lib
	fi
	if [[ ! -d src ]]; then
		mkdir src
	fi
}


debug() {
	cmake -DCMAKE_BUILD_TYPE=Debug .
}


release() {
	cmake -DCMAKE_BUILD_TYPE=Release .
}


if [[ $2 ]]; then
	help
	exit 0
fi


case $1 in
	init)
		"$1"
	;;
	release)
		"$1"
	;;
	debug)
		"$1"
	;;
	"")
		debug
	;;
	*)
		helpText
	;;
esac
